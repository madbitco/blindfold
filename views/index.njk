{% set page_title = page.title or meta.subtitle or '' %}
{% set page_desc = page_description or meta.description or '' %}
{% set page_image = page_image or meta.og_image or '' %}

{% extends "layouts/main.njk" %}

{% block body %}
<main class="pa3 ph0-l">
  {% if not user %}
  <div class="content">
    <h2 class="f3 tc">Turn off retweets from the people you follow.</h2>
    <p>Not seeing retweets in your feed helps your mind stay free of all the negativity that they usually amplify.</p>
    <p><em>The Atlantic</em> made a great <a href="https://www.theatlantic.com/magazine/archive/2018/04/the-case-against-retweets/554078/">case for turning off your retweets</a> and you should give it a read.</p>
    <p>As it would normally be a laborious task, I built <em>Blindfold</em> to do it for you. Oh, and you can <em>always</em> revert back.</p>
    <p class="mv4">
      <a href="{{ base_url }}/auth" class="btn btn-primary db">Sign in with Twitter</a>
    </p>
    <p class="lh-title tc"><small>This service is <em>free</em>. You will have to confirm your intention after signing in with <em>Twitter</em>.</small></p>
  </div>
  {% else %}
    {% verbatim %}

    <div class="flex justify-center" id="app">
      <transition name="fade">
        <err-msg v-show="errors.length > 0" :errors="errors" @click="clearErrors"></err-msg>
      </transition>

      <div class="w-100 pv3 pv4-m">        
        <h3 class="lh-title tc mv2">Tailor your Twitter feed:</h3>
        <div class="tc mv4 flex-ns justify-between items-center">
          <transition name="rotate" mode="out-in">
            <btn
              css="btn btn-primary set"
              label="Hide retweets"
              :disabled="isProcessing"
              v-if="offState === 'default'"
              @click="silenceTheLambs">
            </btn>
            <btn-progress
              css="btn btn-primary set"
              v-if="offState === 'active'">
            </btn-progress>
            <btn-done
              css="btn btn-primary set"
              color="#fff"
              v-if="offState === 'complete'">
            </btn-done>
          </transition>

          <span class="f7 light-silver ttu tracked tc pa3 db">or</span>
          
          <transition name="rotate" mode="out-in">
            <btn
              css="btn btn-secondary set"
              label="Show retweets"
              :disabled="isProcessing"
              v-if="onState === 'default'"
              @click="releaseTheKraken">
            </btn>
            <btn-progress
              css="btn btn-secondary set"
              v-if="onState === 'active'">
            </btn-progress>
            <btn-done
              css="btn btn-secondary set"
              color="#1da1f2"
              v-if="onState === 'complete'">
            </btn-done>
          </transition>
        </div>

        <p class="lh-title tc ph5-m"><small>Using <em>Blindfold</em> will only affect retweets. You will still see promoted tweets, quote tweets and cards.</small></p>
      </div>
    </div>

    {% endverbatim %}
  {% endif %}
</main>
{% endblock %}

{% block scripts %}
  {% if user %}
    {% verbatim %}
    <script>
      /* global Vue */
      /* eslint indent: 0 */
      Vue.component('btn', {
        props: ['label', 'css', 'disabled'],
        template: '<button :class="css" :disabled="disabled" @click="btnClick"><span v-show="!activity" class="db mv1">{{ label }}</span><span class="spinner" v-show="activity"><span class="double-bounce1"></span><span class="double-bounce2"></span></span></button>',
        methods: {
          btnClick: function () {
            this.$emit('click');
          }
        }
      });

      Vue.component('btn-progress', {
        props: ['css'],
        template: '<div :class="css"><span class="spinner"><span class="double-bounce1"></span><span class="double-bounce2"></span></span></div>'
      });

      Vue.component('btn-done', {
        props: ['css', 'color'],
        template: '<div :class="css"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" class="v-mid" viewBox="-0.073 -50.757 30.146 23.818" :fill="color"><path d="M29.824-45.249a.628.628 0 0 0 0-.894l-4.38-4.38a.656.656 0 0 0-.893 0L11.25-37.192l-5.8-5.83a.656.656 0 0 0-.894 0l-4.38 4.38a.628.628 0 0 0 0 .894l10.62 10.635c.146.102.278.176.454.176s.308-.074.454-.176zm0 0"/></svg></div>'
      });

      Vue.component('err-msg', {
        props: ['errors'],
        template: '<div @click="errClick" class="err absolute top-0 left-0 w-100 bg-light-red near-black"><ul v-for="error in errors"><li>{{ error.message }}</li></ul></div>',
        methods: {
          errClick: function () {
            this.$emit('click');
          }
        }
      });

      var app = new Vue({
        el: '#app',
        data: {
          isProcessing: false,
          offState: 'default',
          onState: 'default',
          errors: []
        },
        methods: {
          updateFriendship: function (wantRetweets) {
            var _self = this;
            _self.isProcessing = true;
            if (wantRetweets) {
              _self.onState = 'active';
            } else {
              _self.offState = 'active';
            }
            fetch('/friends', {
              method: 'POST',
              body: JSON.stringify({
                want_retweets: wantRetweets
              }),
              headers: {
                'Content-Type': 'application/json'
              }
            }).then(function (response) {
              return response.json();
            }).then(function (json) {
              if (json.errors) {
                _self.errors = json.errors;
              }

              if (wantRetweets) {
                _self.onState = 'complete';
              } else {
                _self.offState = 'complete';
              }

              _self.isProcessing = false;
            });
          },
          silenceTheLambs: function (ev) {
            this.updateFriendship(false);
          },
          releaseTheKraken: function (ev) {
            this.updateFriendship(true);
          },
          clearErrors: function () {
            this.errors = [];
          },
          resetControls: function () {

          }
        }
      });
    </script>
    {% endverbatim %}
  {% endif %}
{% endblock %}
