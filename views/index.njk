{% set page_title = page.title or meta.subtitle or '' %}
{% set page_desc = page_description or meta.description or '' %}
{% set page_image = page_image or meta.og_image or '' %}

{% extends "layouts/main.njk" %}

{% block body %}
<main class="pa3 mw6 ml-auto mr-auto">
  {% if not user %}
  <div class="ph4-ns content">
    <h2 class="f3 tc">Turn off retweets from the people you follow.</h2>
    <p>Not seeing retweets in your feed helps your mind stay free of all the negativity that they usually amplify.</p>
    <p><em>The Atlantic</em> made a great <a href="https://www.theatlantic.com/magazine/archive/2018/04/the-case-against-retweets/554078/">case for turning off your retweets</a> and you should give it a read.</p>
    <p>As it would normally be a laborious task, I built <em>Blindfold</em> to do it for you. Oh, and you can <em>always</em> revert back.</p>
    <p class="mv4">
      <a href="{{ base_url }}/auth" class="btn btn-primary db">Sign in with Twitter</a>
    </p>
    <p class="lh-title tc"><small>This service is <em>free</em>. You will have to confirm your intention after signing in with <em>Twitter</em>.</small></p>
  </div>
  {% else %}
    {% verbatim %}

    <div class="flex justify-center" id="app">
      <transition name="fade">
        <err-msg v-show="errors.length > 0" :errors="errors" @click="clearErrors"></err-msg>
      </transition>

      <div class="w-100 pv3 pv4-m">
        <h3 class="tc mt0 mb4 normal ph4">Retweets are <strong>{{ isMaxBlocked }}</strong> for all people you follow.</h3>
        <p class="tc">
          <btn-progress
            css="btn btn-primary w5"
            label="Disable retweets"
            :activity="isActiveOff"
            :disabled="isActiveOn"
            @click="silenceTheLambs">
          </btn-progress>
        </p>
        <p class="f7 light-silver ttu tracked tc">or</p>
        <p class="tc">
          <btn-progress
            css="btn btn-secondary w5"
            label="Enable retweets"
            :activity="isActiveOn"
            :disabled="isActiveOff"
            :disabled="rtBlocked == 0"
            @click="releaseTheKraken">
          </btn-progress>
        </p>
      </div>
    </div>

    {% endverbatim %}
  {% endif %}
</main>
{% endblock %}

{% block scripts %}
  {% if user %}
    {% verbatim %}
    <script>
      /* global Vue */
      /* eslint indent: 0 */
      Vue.component('btn-progress', {
        props: ['activity', 'label', 'css', 'disabled'],
        template: '<button :class="css" :disabled="disabled" @click="btnClick"><span v-show="!activity" class="db mv1">{{ label }}</span><span class="spinner" v-show="activity"><span class="double-bounce1"></span><span class="double-bounce2"></span></span></button>',
        methods: {
          btnClick: function () {
            this.$emit('click');
          }
        }
      });

      Vue.component('err-msg', {
        props: ['errors'],
        template: '<div @click="errClick" class="absolute top-0 left-0 w-100 bg-light-red near-black"><ul v-for="error in errors"><li>{{ error.message }}</li></ul></div>',
        methods: {
          errClick: function () {
            this.$emit('click');
          }
        }
      });

      var app = new Vue({
        el: '#app',
        data: {
          rtBlocked: null,
          following: null,
          isActiveOn: false,
          isActiveOff: false,
          errors: []
        },
        computed: {
          isMaxBlocked: function () {
            if (this.rtBlocked >= this.following) {
              return 'disabled';
            } else if (this.rtBlocked === 0) {
              return 'enabled';
            } else {
              return '???';
            }
          }
        },
        methods: {
          updateFriendship: function (wantRetweets) {
            var _self = this;
            fetch('/friends', {
              method: 'POST',
              body: JSON.stringify({
                want_retweets: wantRetweets
              }),
              headers: {
                'Content-Type': 'application/json'
              }
            }).then(function (response) {
              return response.json();
            }).then(function (json) {
              if (json.errors) {
                _self.errors = json.errors;
              } else {
                _self.rtBlocked = json.retweeters_blocked.count;
              }
              _self.isActiveOff = false;
              _self.isActiveOn = false;
            });
          },
          silenceTheLambs: function (ev) {
            this.isActiveOff = true;
            this.updateFriendship(false);
          },
          releaseTheKraken: function (ev) {
            this.isActiveOn = true;
            this.updateFriendship(true);
          },
          clearErrors: function () {
            this.errors = [];
          }
        },
        mounted: function () {
          var _self = this;
          _self.$nextTick(function () {
            fetch('/friends').then(function (response) {
              return response.json();
            }).then(function (json) {
              if (json.errors) {
                _self.errors = json.errors;
              } else {
                _self.rtBlocked = json.retweeters_blocked.count;
                _self.following = json.following.length;
              }
            });
          });
        }
      });
    </script>
    {% endverbatim %}
  {% endif %}
{% endblock %}
